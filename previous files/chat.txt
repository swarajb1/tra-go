Certainly! Here's an example of a deep learning code using the Python programming language and the TensorFlow library to create a model that takes a 60x5 matrix as input and produces a 1x2 matrix as output:

```python

import tensorflow as tf

# Define the dimensions of the input and output matrices
input_shape = (60, 5)
output_shape = (1, 2)

# Create a sequential model
model = tf.keras.models.Sequential()

# Add layers to the model
model.add(tf.keras.layers.Dense(64, activation='relu', input_shape=input_shape))
model.add(tf.keras.layers.Dense(32, activation='relu'))
model.add(tf.keras.layers.Dense(tf.math.reduce_prod(output_shape), activation='linear'))

# Reshape the output to the desired shape
model.add(tf.keras.layers.Reshape(output_shape))

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Generate some random input and output data for demonstration
import numpy as np
input_data = np.random.rand(1, *input_shape)
output_data = np.random.rand(1, *output_shape)

# Train the model
model.fit(input_data, output_data, epochs=10, batch_size=1)

# Test the model with some sample input
sample_input = np.random.rand(1, *input_shape)
predicted_output = model.predict(sample_input)

print("Predicted output:")
print(predicted_output)
```

In this example, we use a sequential model with three dense layers. The input shape is set to (60, 5), and the output shape is (1, 2). The model is trained using mean squared error (MSE) as the loss function and the Adam optimizer. Finally, the model is tested with a sample input to obtain the predicted output.

Please note that this is a basic example, and you may need to modify the model architecture, hyperparameters, and training data to suit your specific problem and achieve better results.